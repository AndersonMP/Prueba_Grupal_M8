openapi: 3.1.0
info:
  title: Biblioteca API
  description: API para gestión de biblioteca con autenticación JWT
  version: 1.0.0
  contact:
    name: Biblioteca API Support
    email: support@biblioteca.com

servers:
  - url: http://localhost:3000/api
    description: Servidor de desarrollo

paths:
  /register:
    post:
      tags:
        - Autenticación
      summary: Registrar nuevo usuario
      description: Crea un nuevo usuario en el sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email del usuario
                  example: usuario@ejemplo.com
                password:
                  type: string
                  minLength: 6
                  description: Contraseña del usuario
                  example: miPassword123
      responses:
        '201':
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario registrado correctamente"
                  data:
                    $ref: '#/components/schemas/Usuario'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Autenticación
      summary: Iniciar sesión
      description: Autentica un usuario y devuelve un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email del usuario
                  example: usuario@ejemplo.com
                password:
                  type: string
                  description: Contraseña del usuario
                  example: miPassword123
      responses:
        '200':
          description: Usuario autenticado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario logueado correctamente"
                  data:
                    type: string
                    description: Token JWT
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    post:
      tags:
        - Autenticación
      summary: Cerrar sesión
      description: Revoca el token JWT del usuario
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout ejecutado correctamente"
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /libros:
    get:
      tags:
        - Libros
      summary: Obtener lista de libros
      description: Obtiene todos los libros disponibles en la biblioteca
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de libros obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libros obtenidos correctamente."
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Libro'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Libros
      summary: Crear nuevo libro (Admin)
      description: Crea un nuevo libro en la biblioteca. Requiere permisos de administrador.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titulo
                - autor
                - categoria
              properties:
                titulo:
                  type: string
                  description: Título del libro
                  example: "El Quijote"
                autor:
                  type: string
                  description: Autor del libro
                  example: "Miguel de Cervantes"
                categoria:
                  type: string
                  description: Categoría del libro
                  example: "Literatura clásica"
                descripcion:
                  type: string
                  description: Descripción del libro
                  example: "Una novela clásica de la literatura española"
      responses:
        '201':
          description: Libro creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libro creado correctamente."
                  data:
                    $ref: '#/components/schemas/Libro'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Acceso denegado. Se requieren permisos de administrador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /libros/{id}:
    get:
      tags:
        - Libros
      summary: Obtener libro por ID
      description: Obtiene un libro específico por su ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del libro
      responses:
        '200':
          description: Libro obtenido correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libro obtenido correctamente."
                  data:
                    $ref: '#/components/schemas/Libro'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Libro no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Libros
      summary: Actualizar libro (Admin)
      description: Actualiza la información de un libro específico. Requiere permisos de administrador.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del libro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titulo
                - autor
                - categoria
              properties:
                titulo:
                  type: string
                  description: Título del libro
                  example: "El Quijote"
                autor:
                  type: string
                  description: Autor del libro
                  example: "Miguel de Cervantes"
                categoria:
                  type: string
                  description: Categoría del libro
                  example: "Literatura clásica"
                descripcion:
                  type: string
                  description: Descripción del libro
                  example: "Una novela clásica de la literatura española"
      responses:
        '200':
          description: Libro actualizado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libro actualizado correctamente."
                  data:
                    $ref: '#/components/schemas/Libro'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Acceso denegado. Se requieren permisos de administrador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Libro no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Libros
      summary: Eliminar libro (Admin)
      description: Elimina un libro de la biblioteca. Requiere permisos de administrador.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del libro
      responses:
        '200':
          description: Libro eliminado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libro eliminado correctamente."
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Acceso denegado. Se requieren permisos de administrador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Libro no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prestamos:
    post:
      tags:
        - Préstamos
      summary: Crear nuevo préstamo
      description: Crea un nuevo préstamo de libro
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - libroId
              properties:
                libroId:
                  type: integer
                  description: ID del libro a prestar
                  example: 1
      responses:
        '201':
          description: Préstamo creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Préstamo creado correctamente."
                  data:
                    $ref: '#/components/schemas/Prestamo'
        '400':
          description: Datos de entrada inválidos o libro no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Préstamos
      summary: Obtener préstamos del usuario
      description: Obtiene todos los préstamos activos del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Préstamos obtenidos correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Préstamos obtenidos correctamente."
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prestamo'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prestamos/{id}:
    get:
      tags:
        - Préstamos
      summary: Obtener préstamo por ID
      description: Obtiene un préstamo específico por su ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del préstamo
      responses:
        '200':
          description: Préstamo obtenido correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Préstamo obtenido correctamente."
                  data:
                    $ref: '#/components/schemas/Prestamo'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Préstamo no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prestamos/{id}/devolver:
    put:
      tags:
        - Préstamos
      summary: Devolver libro
      description: Marca un préstamo como devuelto
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del préstamo
      responses:
        '200':
          description: Libro devuelto correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Libro devuelto correctamente."
                  data:
                    $ref: '#/components/schemas/Prestamo'
        '400':
          description: Préstamo no encontrado o ya devuelto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prestamos/historial:
    get:
      tags:
        - Préstamos
      summary: Obtener historial de préstamos
      description: Obtiene el historial completo de préstamos del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial obtenido correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Historial obtenido correctamente."
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Historial'
        '401':
          description: Token no proporcionado o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del endpoint de login

  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          description: ID único del usuario
          example: 1
        email:
          type: string
          format: email
          description: Email del usuario
          example: usuario@ejemplo.com
        rol:
          type: string
          description: Rol del usuario (usuario o admin)
          example: "usuario"
      required:
        - id
        - email
        - rol

    Libro:
      type: object
      properties:
        id:
          type: integer
          description: ID único del libro
          example: 1
        titulo:
          type: string
          description: Título del libro
          example: "El Quijote"
        autor:
          type: string
          description: Autor del libro
          example: "Miguel de Cervantes"
        categoria:
          type: string
          description: Categoría del libro
          example: "Literatura clásica"
        descripcion:
          type: string
          nullable: true
          description: Descripción del libro
          example: "Una novela clásica de la literatura española"
        disponible:
          type: boolean
          description: Indica si el libro está disponible para préstamo
          example: true
      required:
        - id
        - titulo
        - autor
        - categoria
        - disponible

    Prestamo:
      type: object
      properties:
        id:
          type: integer
          description: ID único del préstamo
          example: 1
        usuarioId:
          type: integer
          description: ID del usuario que realizó el préstamo
          example: 1
        libroId:
          type: integer
          description: ID del libro prestado
          example: 1
        fechaPrestamo:
          type: string
          format: date-time
          description: Fecha en que se realizó el préstamo
          example: "2024-01-15T10:30:00Z"
        fechaDevolucion:
          type: string
          format: date-time
          nullable: true
          description: Fecha en que se devolvió el libro
          example: "2024-01-20T15:45:00Z"
        usuario:
          $ref: '#/components/schemas/Usuario'
        libro:
          $ref: '#/components/schemas/Libro'
      required:
        - id
        - usuarioId
        - libroId
        - fechaPrestamo

    Historial:
      type: object
      properties:
        id:
          type: integer
          description: ID único del registro de historial
          example: 1
        usuarioId:
          type: integer
          description: ID del usuario
          example: 1
        libroId:
          type: integer
          description: ID del libro
          example: 1
        fechaPrestamo:
          type: string
          format: date-time
          description: Fecha en que se realizó el préstamo
          example: "2024-01-15T10:30:00Z"
        fechaDevolucion:
          type: string
          format: date-time
          description: Fecha en que se devolvió el libro
          example: "2024-01-20T15:45:00Z"
        libro:
          $ref: '#/components/schemas/Libro'
      required:
        - id
        - usuarioId
        - libroId
        - fechaPrestamo
        - fechaDevolucion

    Error:
      type: object
      properties:
        message:
          type: string
          description: Mensaje de error
          example: "Error interno del servidor"
      required:
        - message

security:
  - bearerAuth: []
